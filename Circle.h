//
// Created by Admin on 18.10.2023.
//

// ifndef, define, endif для защиты от повторного включения заголовочного файла
#ifndef CIRCLE_CIRCLE_H
#define CIRCLE_CIRCLE_H

#include <ostream>

class Circle {
private:
    // Приватный члены класса радиус, координаты (x, y), константа PI для
    // вычисления площади
    const double PI = 3.141592653589793238463;
    double r;
    double x;
    double y;
public:
    // Конструктор по умолчанию
    Circle();
    // Конструктор с параметрами
    Circle(double r, double x, double y);
    // Конструктор копирования (для инициализации нового объекта другим,
    // уже существующим объектом)
    Circle(const Circle &other_circle);
    // Оператор копирующего присваивания (для копирования парметров одного объекта
    // в другой, уже инициализированный объект)
    Circle& operator=(const Circle &other_circle);



    // Конструктор перемещения (для инициализации нового объекта другим,
    // уже существующим объектом и удалением объекта, из которого производилось
    // перемещеине параметров). Работает благодаря семантике перемещения и rvalue
    // ссылкам (&&)
    Circle(Circle &&other_circle) noexcept;
    // Оператор перемещения (то же самое, что и конструктор копирования, только
    // он нужен для перемещения в уже инициализированный объект)

    // Конструктор и оператор перемещения всегда помечаются как noexcept
    Circle& operator=(Circle &&other_circle) noexcept;



    // Функция, показывающая, лежит ли точка внутри круга
    bool IsInCircle(double x, double y);
    // Перегрузка операторов сравнения < и > (сравнивают два круга по площади).
    // Помечены как const, так как они не изменяют приватные переменные.
    // Ссылка на объект в параметрах также константная, так как объект не меняется
    // (то же самое в конструкторе и операторе копирования)
    bool operator<(const Circle &other_circle) const;
    bool operator>(const Circle &other_circle) const;
    // Перегрузка оператора сложения круга. Увеличивает радиус круга.
    Circle& operator+(double r);
    // Операторы вставки в поток и получения из потока. Для вставки в поток используется
    // << и поток std::ostream os, для получения из потока >> и std::istream is. Вместо os и is
    // мы потом используем соответственно cout и cin в примерах использования. Ключевое слово
    // friend означает, что эти функции не принадлежат классу, но при этом имеют доступ к его
    // приватным членам данных. Ссылка в операторе << константная, так как мы просто выводим
    // данные и не меняем их.
    friend std::ostream& operator<<(std::ostream& os, const Circle& circle);
    friend std::istream& operator>>(std::istream& is, Circle& circle);
};


#endif //CIRCLE_CIRCLE_H
